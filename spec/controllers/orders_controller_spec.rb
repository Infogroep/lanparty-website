require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrdersController do

	# This should return the minimal set of attributes required to create a valid
	# Order. As you add validations to Order, be sure to
	# update the return value of this method accordingly.
	def valid_attributes
		{ user_id: @user.id }
	end

	def additional_params
		@additional_params || {}
	end

	def set_owner(user)
		@user = user
		@order = Order.create! valid_attributes
		@additional_params = additional_params.merge(id: @order.id)
	end

	describe_access(
		login: [:index, :edit, :destroy, :show, :new, :update, :create]
	) do

		it_should_require_user_or_access_for_actions(:order_processing, [:show,:edit,:update,:create,:destroy]) do
			include_examples "standard_controller", Order
		end
	end
end
